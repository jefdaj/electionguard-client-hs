-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation encryptBallotsApiV1BallotEncryptPost
module ElectionGuard.API.Mediator.Generated.Operations.EncryptBallotsApiV1BallotEncryptPost where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified ElectionGuard.API.Generated.Common
import ElectionGuard.API.Mediator.Generated.Types

-- | > POST /api/v1/ballot/encrypt
-- 
-- Encrypt one or more ballots
encryptBallotsApiV1BallotEncryptPost :: forall m s . (ElectionGuard.API.Generated.Common.MonadHTTP m, ElectionGuard.API.Generated.Common.SecurityScheme s) => ElectionGuard.API.Generated.Configuration s  -- ^ The configuration to use in the request
  -> EncryptBallotsRequest                                                                                                                            -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response EncryptBallotsApiV1BallotEncryptPostResponse)) -- ^ Monad containing the result of the operation
encryptBallotsApiV1BallotEncryptPost config
                                     body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either EncryptBallotsApiV1BallotEncryptPostResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> EncryptBallotsApiV1BallotEncryptPostResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              EncryptBallotsApiV1BallotEncryptPostResponseBody200)
                                                                                                                                                                                                                          | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 422) (Network.HTTP.Client.Types.responseStatus response) -> EncryptBallotsApiV1BallotEncryptPostResponse422 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HTTPValidationError)
                                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (ElectionGuard.API.Generated.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/api/v1/ballot/encrypt") [] (GHC.Maybe.Just body) ElectionGuard.API.Generated.Common.RequestBodyEncodingJSON)
-- | > POST /api/v1/ballot/encrypt
-- 
-- The same as 'encryptBallotsApiV1BallotEncryptPost' but returns the raw 'Data.ByteString.Char8.ByteString'
encryptBallotsApiV1BallotEncryptPostRaw :: forall m s . (ElectionGuard.API.Generated.Common.MonadHTTP m,
                                                         ElectionGuard.API.Generated.Common.SecurityScheme s) =>
                                           ElectionGuard.API.Generated.Configuration s ->
                                           EncryptBallotsRequest ->
                                           m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
encryptBallotsApiV1BallotEncryptPostRaw config
                                        body = GHC.Base.id (ElectionGuard.API.Generated.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/api/v1/ballot/encrypt") [] (GHC.Maybe.Just body) ElectionGuard.API.Generated.Common.RequestBodyEncodingJSON)
-- | > POST /api/v1/ballot/encrypt
-- 
-- Monadic version of 'encryptBallotsApiV1BallotEncryptPost' (use with 'ElectionGuard.API.Generated.Common.runWithConfiguration')
encryptBallotsApiV1BallotEncryptPostM :: forall m s . (ElectionGuard.API.Generated.Common.MonadHTTP m,
                                                       ElectionGuard.API.Generated.Common.SecurityScheme s) =>
                                         EncryptBallotsRequest ->
                                         Control.Monad.Trans.Reader.ReaderT (ElectionGuard.API.Generated.Configuration s)
                                                                            m
                                                                            (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                (Network.HTTP.Client.Types.Response EncryptBallotsApiV1BallotEncryptPostResponse))
encryptBallotsApiV1BallotEncryptPostM body = GHC.Base.fmap (GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either EncryptBallotsApiV1BallotEncryptPostResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> EncryptBallotsApiV1BallotEncryptPostResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               EncryptBallotsApiV1BallotEncryptPostResponseBody200)
                                                                                                                                                                                                                           | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 422) (Network.HTTP.Client.Types.responseStatus response) -> EncryptBallotsApiV1BallotEncryptPostResponse422 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HTTPValidationError)
                                                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3)) (ElectionGuard.API.Generated.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/api/v1/ballot/encrypt") [] (GHC.Maybe.Just body) ElectionGuard.API.Generated.Common.RequestBodyEncodingJSON)
-- | > POST /api/v1/ballot/encrypt
-- 
-- Monadic version of 'encryptBallotsApiV1BallotEncryptPostRaw' (use with 'ElectionGuard.API.Generated.Common.runWithConfiguration')
encryptBallotsApiV1BallotEncryptPostRawM :: forall m s . (ElectionGuard.API.Generated.Common.MonadHTTP m,
                                                          ElectionGuard.API.Generated.Common.SecurityScheme s) =>
                                            EncryptBallotsRequest ->
                                            Control.Monad.Trans.Reader.ReaderT (ElectionGuard.API.Generated.Configuration s)
                                                                               m
                                                                               (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                   (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
encryptBallotsApiV1BallotEncryptPostRawM body = GHC.Base.id (ElectionGuard.API.Generated.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/api/v1/ballot/encrypt") [] (GHC.Maybe.Just body) ElectionGuard.API.Generated.Common.RequestBodyEncodingJSON)
-- | Represents a response of the operation 'encryptBallotsApiV1BallotEncryptPost'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'EncryptBallotsApiV1BallotEncryptPostResponseError' is used.
data EncryptBallotsApiV1BallotEncryptPostResponse =                                                      
   EncryptBallotsApiV1BallotEncryptPostResponseError GHC.Base.String                                     -- ^ Means either no matching case available or a parse error
  | EncryptBallotsApiV1BallotEncryptPostResponse200 EncryptBallotsApiV1BallotEncryptPostResponseBody200  -- ^ Successful Response
  | EncryptBallotsApiV1BallotEncryptPostResponse422 HTTPValidationError                                  -- ^ Validation Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema EncryptBallotsApiV1BallotEncryptPostResponseBody200
-- 
-- 
data EncryptBallotsApiV1BallotEncryptPostResponseBody200 = EncryptBallotsApiV1BallotEncryptPostResponseBody200 {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON EncryptBallotsApiV1BallotEncryptPostResponseBody200
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON EncryptBallotsApiV1BallotEncryptPostResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EncryptBallotsApiV1BallotEncryptPostResponseBody200" (\obj -> GHC.Base.pure EncryptBallotsApiV1BallotEncryptPostResponseBody200)
