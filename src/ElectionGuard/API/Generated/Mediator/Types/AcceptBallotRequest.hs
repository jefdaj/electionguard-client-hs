-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema AcceptBallotRequest
module ElectionGuard.API.Mediator.Generated.Types.AcceptBallotRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified ElectionGuard.API.Mediator.Generated.Common

-- | Defines the data type for the schema AcceptBallotRequest
-- 
-- 
data AcceptBallotRequest = AcceptBallotRequest {
  -- | ballot
  acceptBallotRequestBallot :: (GHC.Maybe.Maybe AcceptBallotRequestBallot)
  -- | context
  , acceptBallotRequestContext :: (GHC.Maybe.Maybe AcceptBallotRequestContext)
  -- | description
  , acceptBallotRequestDescription :: (GHC.Maybe.Maybe AcceptBallotRequestDescription)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AcceptBallotRequest
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ballot" (acceptBallotRequestBallot obj) : (Data.Aeson..=) "context" (acceptBallotRequestContext obj) : (Data.Aeson..=) "description" (acceptBallotRequestDescription obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ballot" (acceptBallotRequestBallot obj) GHC.Base.<> ((Data.Aeson..=) "context" (acceptBallotRequestContext obj) GHC.Base.<> (Data.Aeson..=) "description" (acceptBallotRequestDescription obj)))
instance Data.Aeson.Types.FromJSON.FromJSON AcceptBallotRequest
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AcceptBallotRequest" (\obj -> ((GHC.Base.pure AcceptBallotRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ballot")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "context")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description"))
-- | Defines the data type for the schema AcceptBallotRequestBallot
-- 
-- 
data AcceptBallotRequestBallot = AcceptBallotRequestBallot {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AcceptBallotRequestBallot
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON AcceptBallotRequestBallot
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AcceptBallotRequestBallot" (\obj -> GHC.Base.pure AcceptBallotRequestBallot)
-- | Defines the data type for the schema AcceptBallotRequestContext
-- 
-- 
data AcceptBallotRequestContext = AcceptBallotRequestContext {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AcceptBallotRequestContext
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON AcceptBallotRequestContext
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AcceptBallotRequestContext" (\obj -> GHC.Base.pure AcceptBallotRequestContext)
-- | Defines the data type for the schema AcceptBallotRequestDescription
-- 
-- 
data AcceptBallotRequestDescription = AcceptBallotRequestDescription {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AcceptBallotRequestDescription
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON AcceptBallotRequestDescription
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AcceptBallotRequestDescription" (\obj -> GHC.Base.pure AcceptBallotRequestDescription)