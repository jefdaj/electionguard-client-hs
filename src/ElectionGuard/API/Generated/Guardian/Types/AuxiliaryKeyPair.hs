-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema AuxiliaryKeyPair
module ElectionGuard.API.Guardian.Generated.Types.AuxiliaryKeyPair where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified ElectionGuard.API.Generated.Common

-- | Defines the data type for the schema AuxiliaryKeyPair
-- 
-- Auxiliary pair of a secret key and public key.
data AuxiliaryKeyPair = AuxiliaryKeyPair {
  -- | public_key
  auxiliaryKeyPairPublicKey :: Data.Text.Internal.Text
  -- | secret_key
  , auxiliaryKeyPairSecretKey :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON AuxiliaryKeyPair
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "public_key" (auxiliaryKeyPairPublicKey obj) : (Data.Aeson..=) "secret_key" (auxiliaryKeyPairSecretKey obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "public_key" (auxiliaryKeyPairPublicKey obj) GHC.Base.<> (Data.Aeson..=) "secret_key" (auxiliaryKeyPairSecretKey obj))
instance Data.Aeson.Types.FromJSON.FromJSON AuxiliaryKeyPair
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AuxiliaryKeyPair" (\obj -> (GHC.Base.pure AuxiliaryKeyPair GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "public_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "secret_key"))