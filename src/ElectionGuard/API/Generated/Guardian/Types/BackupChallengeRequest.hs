-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the types generated from the schema BackupChallengeRequest
module ElectionGuard.API.Generated.Guardian.Types.BackupChallengeRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified ElectionGuard.API.Generated.Common

-- | Defines the data type for the schema BackupChallengeRequest
-- 
-- 
data BackupChallengeRequest = BackupChallengeRequest {
  -- | election_partial_key_backup
  backupChallengeRequestElectionPartialKeyBackup :: (GHC.Maybe.Maybe BackupChallengeRequestElectionPartialKeyBackup)
  -- | election_polynomial
  , backupChallengeRequestElectionPolynomial :: (GHC.Maybe.Maybe BackupChallengeRequestElectionPolynomial)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON BackupChallengeRequest
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "election_partial_key_backup" (backupChallengeRequestElectionPartialKeyBackup obj) : (Data.Aeson..=) "election_polynomial" (backupChallengeRequestElectionPolynomial obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "election_partial_key_backup" (backupChallengeRequestElectionPartialKeyBackup obj) GHC.Base.<> (Data.Aeson..=) "election_polynomial" (backupChallengeRequestElectionPolynomial obj))
instance Data.Aeson.Types.FromJSON.FromJSON BackupChallengeRequest
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BackupChallengeRequest" (\obj -> (GHC.Base.pure BackupChallengeRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "election_partial_key_backup")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "election_polynomial"))
-- | Defines the data type for the schema BackupChallengeRequestElection_partial_key_backup
-- 
-- 
data BackupChallengeRequestElectionPartialKeyBackup = BackupChallengeRequestElectionPartialKeyBackup {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON BackupChallengeRequestElectionPartialKeyBackup
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON BackupChallengeRequestElectionPartialKeyBackup
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BackupChallengeRequestElectionPartialKeyBackup" (\obj -> GHC.Base.pure BackupChallengeRequestElectionPartialKeyBackup)
-- | Defines the data type for the schema BackupChallengeRequestElection_polynomial
-- 
-- 
data BackupChallengeRequestElectionPolynomial = BackupChallengeRequestElectionPolynomial {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON BackupChallengeRequestElectionPolynomial
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON BackupChallengeRequestElectionPolynomial
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BackupChallengeRequestElectionPolynomial" (\obj -> GHC.Base.pure BackupChallengeRequestElectionPolynomial)